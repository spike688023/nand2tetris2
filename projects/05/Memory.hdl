// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way ( in=load, sel=address[12..14], a=t0, b=t1, c=t2, d=t3, e=t4, f=t5, g=t6, h=t7);

    Or (a=t4, b=t5, out=tt4);
    RAM4K ( in=in, load=t0, address=address[0..11],out=out0);
    RAM4K ( in=in, load=t1, address=address[0..11],out=out1);
    RAM4K ( in=in, load=t2, address=address[0..11],out=out2);
    RAM4K ( in=in, load=t3, address=address[0..11],out=out3);
    //RAM4K ( in=in, load=t6, address=address[0..11],out=out6);
    Keyboard ( out=out6);
    Screen ( in=in, load=tt4, address=address[0..12],out=out4);

    Mux8Way16 (a=out0, b=out1, c=out2, d=out3, e=out4, f=out4, g=out6, h=false, sel=address[12..14], out=out);
}
