<class>
  <keyword> class </keyword>
  <identifier> Ball </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lengthx </identifier>
    <symbol> , </symbol>
    <identifier> lengthy </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> d </identifier>
    <symbol> , </symbol>
    <identifier> straightD </identifier>
    <symbol> , </symbol>
    <identifier> diagonalD </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> invert </identifier>
    <symbol> , </symbol>
    <identifier> positivex </identifier>
    <symbol> , </symbol>
    <identifier> positivey </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> leftWall </identifier>
    <symbol> , </symbol>
    <identifier> rightWall </identifier>
    <symbol> , </symbol>
    <identifier> topWall </identifier>
    <symbol> , </symbol>
    <identifier> bottomWall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Ball </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AleftWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> ArightWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AtopWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AbottomWall </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> x </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Ax </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> y </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Ay </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> leftWall </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> AleftWall </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> rightWall </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> ArightWall </identifier>
        </expression>
          <symbol> - </symbol>
          <term>
          <integerConstant> 6 </integerConstant>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> topWall </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> AtopWall </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> bottomWall </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> AbottomWall </identifier>
        </expression>
          <symbol> - </symbol>
          <term>
          <integerConstant> 6 </integerConstant>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> wall </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <integerConstant> 0 </integerConstant>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> show </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <expression>
        <term>
        <keyword> this </keyword>
      </expression>
      </expression>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Memory </identifier>
      <symbol> . </symbol>
      <identifier> deAlloc </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> this </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> show </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> true </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> draw </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> hide </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> false </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> draw </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> drawRectangle </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <integerConstant> 5 </integerConstant>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <integerConstant> 5 </integerConstant>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <returnStatement>
      <keyword> return </keyword>
      <expression>
        <term>
        <identifier> x </identifier>
      </expression>
      </expression>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <returnStatement>
      <keyword> return </keyword>
      <expression>
        <term>
        <identifier> x </identifier>
      </expression>
        <symbol> + </symbol>
        <term>
        <integerConstant> 5 </integerConstant>
      </expression>
      </expression>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> setDestination </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> destx </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> desty </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> dx </identifier>
      <symbol> , </symbol>
      <identifier> dy </identifier>
      <symbol> , </symbol>
      <identifier> temp </identifier>
      <symbol> ; </symbol>
    </varDec>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> lengthx </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> destx </identifier>
        </expression>
          <symbol> - </symbol>
          <term>
          <identifier> x </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> lengthy </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> desty </identifier>
        </expression>
          <symbol> - </symbol>
          <term>
          <identifier> y </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> dx </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Math </identifier>
          <symbol> . </symbol>
          <identifier> abs </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> lengthx </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> dy </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Math </identifier>
          <symbol> . </symbol>
          <identifier> abs </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> lengthy </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> invert </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> dx </identifier>
          </expression>
            <symbol> &lt; </symbol>
            <term>
            <identifier> dy </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> invert </identifier>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> temp </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> dx </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> dx </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> dy </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> dy </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> temp </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> positivex </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> y </identifier>
              </expression>
                <symbol> &lt; </symbol>
                <term>
                <identifier> desty </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> positivey </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> x </identifier>
              </expression>
                <symbol> &lt; </symbol>
                <term>
                <identifier> destx </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivex </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                  <identifier> x </identifier>
                </expression>
                  <symbol> &lt; </symbol>
                  <term>
                  <identifier> destx </identifier>
                </expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivey </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                  <identifier> y </identifier>
                </expression>
                  <symbol> &lt; </symbol>
                  <term>
                  <identifier> desty </identifier>
                </expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> d </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <integerConstant> 2 </integerConstant>
          </expression>
            <symbol> * </symbol>
            <term>
            <identifier> dy </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
          <symbol> - </symbol>
          <term>
          <identifier> dx </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> straightD </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <integerConstant> 2 </integerConstant>
        </expression>
          <symbol> * </symbol>
          <term>
          <identifier> dy </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> diagonalD </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <integerConstant> 2 </integerConstant>
        </expression>
          <symbol> * </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> dy </identifier>
          </expression>
            <symbol> - </symbol>
            <term>
            <identifier> dx </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> move </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> hide </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> d </identifier>
        </expression>
          <symbol> &lt; </symbol>
          <term>
          <integerConstant> 0 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> d </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> d </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> straightD </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> d </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                <identifier> d </identifier>
              </expression>
                <symbol> + </symbol>
                <term>
                <identifier> diagonalD </identifier>
              </expression>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          <ifStatement>
            <keyword> if </keyword>
            <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> positivey </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
              <ifStatement>
                <keyword> if </keyword>
                <symbol> ( </symbol>
                  <expression>
                    <term>
                    <identifier> invert </identifier>
                  </expression>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> x </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                        <identifier> x </identifier>
                      </expression>
                        <symbol> + </symbol>
                        <term>
                        <integerConstant> 4 </integerConstant>
                      </expression>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                    <statements>
                      <letStatement>
                        <keyword> let </keyword>
                        <identifier> y </identifier>
                        <symbol> = </symbol>
                        <expression>
                          <term>
                          <identifier> y </identifier>
                        </expression>
                          <symbol> + </symbol>
                          <term>
                          <integerConstant> 4 </integerConstant>
                        </expression>
                        </expression>
                        <symbol> ; </symbol>
                      </letStatement>
                    </statements>
                    <symbol> } </symbol>
                  </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
                <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                    <expression>
                      <term>
                      <identifier> invert </identifier>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                      <letStatement>
                        <keyword> let </keyword>
                        <identifier> x </identifier>
                        <symbol> = </symbol>
                        <expression>
                          <term>
                          <identifier> x </identifier>
                        </expression>
                          <symbol> - </symbol>
                          <term>
                          <integerConstant> 4 </integerConstant>
                        </expression>
                        </expression>
                        <symbol> ; </symbol>
                      </letStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> y </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                            <identifier> y </identifier>
                          </expression>
                            <symbol> - </symbol>
                            <term>
                            <integerConstant> 4 </integerConstant>
                          </expression>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                </statements>
                <symbol> } </symbol>
              </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> positivex </identifier>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
            <expression>
              <term>
              <identifier> invert </identifier>
            </expression>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <identifier> y </identifier>
                <symbol> = </symbol>
                <expression>
                  <term>
                  <identifier> y </identifier>
                </expression>
                  <symbol> + </symbol>
                  <term>
                  <integerConstant> 4 </integerConstant>
                </expression>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
            <keyword> else </keyword>
            <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <identifier> x </identifier>
                  </expression>
                    <symbol> + </symbol>
                    <term>
                    <integerConstant> 4 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
          <statements>
          <ifStatement>
            <keyword> if </keyword>
            <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> invert </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <identifier> y </identifier>
                  </expression>
                    <symbol> - </symbol>
                    <term>
                    <integerConstant> 4 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
                <statements>
                  <letStatement>
                    <keyword> let </keyword>
                    <identifier> x </identifier>
                    <symbol> = </symbol>
                    <expression>
                      <term>
                      <identifier> x </identifier>
                    </expression>
                      <symbol> - </symbol>
                      <term>
                      <integerConstant> 4 </integerConstant>
                    </expression>
                    </expression>
                    <symbol> ; </symbol>
                  </letStatement>
                </statements>
                <symbol> } </symbol>
              </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ~ </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> x </identifier>
          </expression>
            <symbol> &gt; </symbol>
            <term>
            <identifier> leftWall </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> wall </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> x </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> leftWall </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ~ </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> x </identifier>
          </expression>
            <symbol> &lt; </symbol>
            <term>
            <identifier> rightWall </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> wall </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> x </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> rightWall </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ~ </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> y </identifier>
          </expression>
            <symbol> &gt; </symbol>
            <term>
            <identifier> topWall </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> wall </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 3 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> y </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> topWall </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ~ </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> y </identifier>
          </expression>
            <symbol> &lt; </symbol>
            <term>
            <identifier> bottomWall </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> wall </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 4 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> y </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> bottomWall </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> show </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <expression>
        <term>
        <identifier> wall </identifier>
      </expression>
      </expression>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> bounce </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> bouncingDirection </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <varDec>
      <keyword> var </keyword>
      <keyword> int </keyword>
      <identifier> newx </identifier>
      <symbol> , </symbol>
      <identifier> newy </identifier>
      <symbol> , </symbol>
      <identifier> divLengthx </identifier>
      <symbol> , </symbol>
      <identifier> divLengthy </identifier>
      <symbol> , </symbol>
      <identifier> factor </identifier>
      <symbol> ; </symbol>
    </varDec>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> divLengthx </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> lengthx </identifier>
        </expression>
          <symbol> / </symbol>
          <term>
          <integerConstant> 10 </integerConstant>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> divLengthy </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> lengthy </identifier>
        </expression>
          <symbol> / </symbol>
          <term>
          <integerConstant> 10 </integerConstant>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> bouncingDirection </identifier>
        </expression>
          <symbol> = </symbol>
          <term>
          <integerConstant> 0 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> factor </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 10 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
          <statements>
          <ifStatement>
            <keyword> if </keyword>
            <symbol> ( </symbol>
              <expression>
                <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                    <symbol> ~ </symbol>
                    <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                      <identifier> lengthx </identifier>
                    </expression>
                      <symbol> &lt; </symbol>
                      <term>
                      <integerConstant> 0 </integerConstant>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                  </expression>
                  </expression>
                  </expression>
                  <symbol> ) </symbol>
                </expression>
                  <symbol> &amp; </symbol>
                  <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                    <identifier> bouncingDirection </identifier>
                  </expression>
                    <symbol> = </symbol>
                    <term>
                    <integerConstant> 1 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ) </symbol>
                </expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
                <symbol> | </symbol>
                <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                    <identifier> lengthx </identifier>
                  </expression>
                    <symbol> &lt; </symbol>
                    <term>
                    <integerConstant> 0 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ) </symbol>
                </expression>
                  <symbol> &amp; </symbol>
                  <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                    <identifier> bouncingDirection </identifier>
                  </expression>
                    <symbol> = </symbol>
                    <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                      <symbol> - </symbol>
                      <term>
                      <integerConstant> 1 </integerConstant>
                    </expression>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                  </expression>
                  </expression>
                  <symbol> ) </symbol>
                </expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> factor </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <integerConstant> 20 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
                <statements>
                  <letStatement>
                    <keyword> let </keyword>
                    <identifier> factor </identifier>
                    <symbol> = </symbol>
                    <expression>
                      <term>
                      <integerConstant> 5 </integerConstant>
                    </expression>
                    </expression>
                    <symbol> ; </symbol>
                  </letStatement>
                </statements>
                <symbol> } </symbol>
              </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> wall </identifier>
        </expression>
          <symbol> = </symbol>
          <term>
          <integerConstant> 1 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> newx </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <integerConstant> 506 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> newy </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> divLengthy </identifier>
              </expression>
                <symbol> * </symbol>
                <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                  <symbol> - </symbol>
                  <term>
                  <integerConstant> 50 </integerConstant>
                </expression>
                </expression>
                </expression>
                <symbol> ) </symbol>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
              <symbol> / </symbol>
              <term>
              <identifier> divLengthx </identifier>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> newy </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> newy </identifier>
              </expression>
                <symbol> * </symbol>
                <term>
                <identifier> factor </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        </statements>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
          <statements>
          <ifStatement>
            <keyword> if </keyword>
            <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> wall </identifier>
              </expression>
                <symbol> = </symbol>
                <term>
                <integerConstant> 2 </integerConstant>
              </expression>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newx </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <integerConstant> 0 </integerConstant>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                      <identifier> divLengthy </identifier>
                    </expression>
                      <symbol> * </symbol>
                      <term>
                      <integerConstant> 50 </integerConstant>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                  </expression>
                    <symbol> / </symbol>
                    <term>
                    <identifier> divLengthx </identifier>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                    <identifier> y </identifier>
                  </expression>
                    <symbol> + </symbol>
                    <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                      <identifier> newy </identifier>
                    </expression>
                      <symbol> * </symbol>
                      <term>
                      <identifier> factor </identifier>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                  </expression>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
                <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                    <expression>
                      <term>
                      <identifier> wall </identifier>
                    </expression>
                      <symbol> = </symbol>
                      <term>
                      <integerConstant> 3 </integerConstant>
                    </expression>
                    </expression>
                    <symbol> ) </symbol>
                    <symbol> { </symbol>
                    <statements>
                      <letStatement>
                        <keyword> let </keyword>
                        <identifier> newy </identifier>
                        <symbol> = </symbol>
                        <expression>
                          <term>
                          <integerConstant> 250 </integerConstant>
                        </expression>
                        </expression>
                        <symbol> ; </symbol>
                      </letStatement>
                      <letStatement>
                        <keyword> let </keyword>
                        <identifier> newx </identifier>
                        <symbol> = </symbol>
                        <expression>
                          <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                            <identifier> divLengthx </identifier>
                          </expression>
                            <symbol> * </symbol>
                            <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                              <symbol> - </symbol>
                              <term>
                              <integerConstant> 25 </integerConstant>
                            </expression>
                            </expression>
                            </expression>
                            <symbol> ) </symbol>
                          </expression>
                          </expression>
                          <symbol> ) </symbol>
                        </expression>
                          <symbol> / </symbol>
                          <term>
                          <identifier> divLengthy </identifier>
                        </expression>
                        </expression>
                        <symbol> ; </symbol>
                      </letStatement>
                      <letStatement>
                        <keyword> let </keyword>
                        <identifier> newx </identifier>
                        <symbol> = </symbol>
                        <expression>
                          <term>
                          <identifier> x </identifier>
                        </expression>
                          <symbol> + </symbol>
                          <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                            <identifier> newx </identifier>
                          </expression>
                            <symbol> * </symbol>
                            <term>
                            <identifier> factor </identifier>
                          </expression>
                          </expression>
                          <symbol> ) </symbol>
                        </expression>
                        </expression>
                        <symbol> ; </symbol>
                      </letStatement>
                    </statements>
                    <symbol> } </symbol>
                    <keyword> else </keyword>
                    <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> newy </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                            <integerConstant> 0 </integerConstant>
                          </expression>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> newx </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                              <identifier> divLengthx </identifier>
                            </expression>
                              <symbol> * </symbol>
                              <term>
                              <integerConstant> 25 </integerConstant>
                            </expression>
                            </expression>
                            <symbol> ) </symbol>
                          </expression>
                            <symbol> / </symbol>
                            <term>
                            <identifier> divLengthy </identifier>
                          </expression>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> newx </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                            <identifier> x </identifier>
                          </expression>
                            <symbol> + </symbol>
                            <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                              <identifier> newx </identifier>
                            </expression>
                              <symbol> * </symbol>
                              <term>
                              <identifier> factor </identifier>
                            </expression>
                            </expression>
                            <symbol> ) </symbol>
                          </expression>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                </statements>
                <symbol> } </symbol>
              </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> setDestination </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <identifier> newx </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> newy </identifier>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
