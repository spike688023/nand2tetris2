<class>
  <keyword> class </keyword>
  <identifier> Square </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> size </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Square </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Asize </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
      <letStatement>
        <keyword> let </keyword>
        <identifier> x </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Ax </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> y </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Ay </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <letStatement>
        <keyword> let </keyword>
        <identifier> size </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
          <identifier> Asize </identifier>
        </expression>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> draw </identifier>
      <symbol> ( </symbol>
      <expressionList>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <expression>
        <term>
        <keyword> this </keyword>
      </expression>
      </expression>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Memory </identifier>
      <symbol> . </symbol>
      <identifier> deAlloc </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> this </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> true </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> drawRectangle </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <identifier> size </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <identifier> size </identifier>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> setColor </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <keyword> false </keyword>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Screen </identifier>
      <symbol> . </symbol>
      <identifier> drawRectangle </identifier>
      <symbol> ( </symbol>
      <expressionList>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <identifier> size </identifier>
        </expression>
        </expression>
        <symbol> , </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
          <symbol> + </symbol>
          <term>
          <identifier> size </identifier>
        </expression>
        </expression>
      </expressionList>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> incSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <symbol> ( </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> ) </symbol>
          </expression>
            <symbol> &lt; </symbol>
            <term>
            <integerConstant> 254 </integerConstant>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
          <symbol> &amp; </symbol>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <symbol> ( </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> ) </symbol>
          </expression>
            <symbol> &lt; </symbol>
            <term>
            <integerConstant> 510 </integerConstant>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> erase </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> size </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> size </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> decSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> size </identifier>
        </expression>
          <symbol> &gt; </symbol>
          <term>
          <integerConstant> 2 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> erase </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> size </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> size </identifier>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveUp </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> y </identifier>
        </expression>
          <symbol> &gt; </symbol>
          <term>
          <integerConstant> 1 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> false </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> y </identifier>
              </expression>
                <symbol> + </symbol>
                <term>
                <identifier> size </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> y </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> true </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveDown </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> y </identifier>
          </expression>
            <symbol> + </symbol>
            <term>
            <identifier> size </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
          <symbol> &lt; </symbol>
          <term>
          <integerConstant> 254 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> false </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> y </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> true </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> y </identifier>
              </expression>
                <symbol> + </symbol>
                <term>
                <identifier> size </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <identifier> x </identifier>
        </expression>
          <symbol> &gt; </symbol>
          <term>
          <integerConstant> 1 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> false </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> x </identifier>
              </expression>
                <symbol> + </symbol>
                <term>
                <identifier> size </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> x </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> true </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
    <symbol> { </symbol>
    <statements>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
        <expression>
          <term>
          <symbol> ( </symbol>
          <expression>
            <term>
            <identifier> x </identifier>
          </expression>
            <symbol> + </symbol>
            <term>
            <identifier> size </identifier>
          </expression>
          </expression>
          <symbol> ) </symbol>
        </expression>
          <symbol> &lt; </symbol>
          <term>
          <integerConstant> 510 </integerConstant>
        </expression>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> false </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> x </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <integerConstant> 2 </integerConstant>
            </expression>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <keyword> true </keyword>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                <identifier> x </identifier>
              </expression>
                <symbol> + </symbol>
                <term>
                <identifier> size </identifier>
              </expression>
              </expression>
              <symbol> ) </symbol>
            </expression>
              <symbol> - </symbol>
              <term>
              <integerConstant> 1 </integerConstant>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> x </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
              <identifier> y </identifier>
            </expression>
              <symbol> + </symbol>
              <term>
              <identifier> size </identifier>
            </expression>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        </statements>
        <symbol> } </symbol>
      </ifStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    </statements>
    <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
