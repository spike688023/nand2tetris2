// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if ( maxLength > 0) { let str = Array.new(maxLength); }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[ length - 1 ] = 32;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, d, index;

        let v = 0;
        let d = 0;
        let index = 0;
        if ( str[0] = 45 ) { let index = index + 1; }
        while ( (str[index] > 47) & (str[index] < 58) ) {
            let d = str[index] - 48;
            let v = ( v * 10 ) + d;
            let index = index + 1;
        }
        if ( str[0] = 45 ) { let v = v * -1; }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if ( val < 0) {
            do appendChar( 45 );
            do int2String( Math.abs(val) );
        } else {
            do int2String(val);
        }
        return;
    }

    method void int2String(int val) {
        var int q, lastDigit;
        var char c;

        // initalize
        let q = 0;
        let lastDigit  = 0;
        let c = 32;

        let q = val / 10;
        let lastDigit  = val - ( q * 10) ;
        let c = (lastDigit + 48);

        if ( val < 10 ) {
            do appendChar(c) ;
        }
        else {
            do int2String(q);
            do appendChar(c) ;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
