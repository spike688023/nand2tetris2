// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array memory;
    static int base, max, freeHead , unfreeHead, length;
    static int freelistCount, unfreelistCount;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freelistCount = 1;
        let unfreelistCount = 0;
        let base = 2048;
        let max = 16384;
        let freeHead = 2048;
        let unfreeHead = 2049;
        let length = base + 3;
        let memory[length] = 16384 - 2050 + 1;
        let memory[freeHead] = 2050;
        let memory[2050] = -1;
        let memory[unfreeHead] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // first fit
        var int currentNode, nextNode, length;
        let currentNode = memory[freeHead];
        let length = memory[currentNode + 1];
        let nextNode = memory[currentNode];

        while ( currentNode > 0 ) {

            if ( ( length - (size + 2) ) > 0 ) {
                let memory[currentNode + 1] = length - size - 2;
                let max = max - size + 2;
                let unfreelistCount = unfreelistCount + 1;
                // two words for addr and size
                return (max + 2);
            }

            let currentNode = memory[currentNode];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      //// get it out from unfree list
      //var int prevNode,currentNode, temp, count;
      //let count = 0;
      //let prevNode = unfreeHead;
      //let currentNode = memory[unfreeHead];

      //if ( unfreeHead  = -1 ) {
      //    return;
      //}

      //// it must be founded
      //while ( count <  unfreelistCount ) {

      //    if ( currentNode = o ) {
      //        // get out from unfree list
      //        let memory[unfreeHead] = memory[currentNode];

      //        // add to head of free list
      //        let temp = memory[freeHead];
      //        let memory[freeHead] = currentNode;
      //        let memory[currentNode] = temp;
      //        let freelistCount = freelistCount + 1;
      //        return;
      //    }

      //    let prevNode = currentNode;
      //    let currentNode = memory[currentNode];
      //    let count = count + 1;
      //}

      return;
    }

}
