// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array value;

    /** Initializes the library. */
    function void init() {
        var int count, temp;
        let count = 0;
        let temp = 1;
        let value = Array.new(16);
        while ( count < 16 ) {
            let value[count] = 0;
            let value[count] = temp;
            let temp = temp + temp;
            let count = count + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ( x < 0 ) {
            let x = x * -1;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, index, shiftedX;
        let sum = 0;
        let index = 0;
        let shiftedX = x;

        if ( (x = 0) | ( y = 0 ) ) { return 0;}

        while ( index < 16 ) {
            if ( Math.bit( y, index) = true) { let sum = sum + shiftedX; }
            let shiftedX = shiftedX + shiftedX;
            let index  = index + 1;
        }
        return sum;
    }

    function boolean bit(int x, int i) {
        if ( x & value[i] ) { return true;}
        else {return false;}
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int N, D, R, Q, index;
        var boolean negative;
        let negative = false;
        let index = 15;
        let N = x;
        let D = y;
        let R = 0;
        let Q = 0;

        if ( (N < 0) & (D > 0) ) { let negative = true;}
        if ( (N > 0) & (D < 0) ) { let negative = true;}
        if (N < 0) { let N = Math.abs(N); }
        if (D < 0) { let D = Math.abs(D); }
        if ( (N < D) | (N = 0) ) { return 0;}

        while ( index > -1) {
            let R = R + R;
            if ( Math.bit( N, index ) ) { let R = R + 1; }
            if ( R - D > -1) {
                let R = R - D;
                let Q = Q | value[index];
            }
            let index  = index - 1;
        }

        if ( negative ) {
            return Q * -1;
        }
        else {
            return Q;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, index, count, value;
        let y = 0;
        let value  = 1;
        let index  = (16/2) - 1;
        let count  = index;
        let value  = 1;
        while ( count > 0 ) {
            let value = value * 2;
            let count = count - 1 ;
        }

        while ( index > -1) {
            // need to avoid overflow
            if ( (x - ( (y + value) * (y + value) ) > -1) ) {
                let y = y + value;
            }
            let index = index - 1;
            let value = value/2 ;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a > b ) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a > b ) {
            return b;
        }
        return a;
    }
}
