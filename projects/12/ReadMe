
log(2N) = logN + 1

這用來比較二種演算法的成長級數，以前只知道 log 很好而已，

實際上，沒有什麼感覺，今天這個演講者，講完後 ，

比較 有感覺了，以N 乘幾2 ，代表同樣一個動作， 變成了2位，

而在 log 的級數世界，變成了  只要多1 個step .

也就是，一件工作 原本10天，乘2變成20天，另一個人 只要多加一天。

取log  是要把原本 linear 的世界，轉成 log 的世界來看。


第一個小作頁，先從 Math.jack 開始實作吧,

乘法， 最簡單就是做連加，但這樣的時間複雜度是 linear ,

在整個OS 中，這麼常用到的func  , 如果是用爆力法實作，那整個os，

應該 會慢到爆了 ， 要實作乘法，最簡單就 是用 連加，但不好，

另一個方法就 是用  bit 位移，來計算，但是，要轉成二進位，沒有可用的function ,

我想到，乘法的梗了，首先，這是個 16 bits 的位元，我記起每個bit 相對應的十進位數，

然後二數相減，剩下的值 大於 0 的話 ，這個bit 就 放1 ，就 這樣一個個減下去。

然後 每個bit 的值， 用陣 列存起來 。


來想一下 2's 補數，能夠讓 正數跟負數，直接相加，值還是對的，但每次都會忘了，

負數的表示式， 先拿4個bits 來看，  -8 ~ 0 ~ 7 , 4個bits ，用來表示16 個數值，

沒錯， 最左的bit 為1  ，代表這是負數，我們拿  -8 跟 7 來實驗，也就是

1000 + 0111 = 1111 ，-8 + 7 = -1 , 所以可以推敲出來， 全部都是1 的話 ，

就是 -1  , 最大的負數值，加上，前面有 1的值，

先來想正數，4個bits 的話 ， index 分別是  0 1 2 3 , 只能用 0 1 2 去做相減，

減完還是正數的話 ，這個index 的值就給 1  ，一直這樣減，減到index 0 的位置 ，

這個位置 的值是1  ，

好， 來想想負數， index 3的值是  -8  , 這是整個bit 裡面最大的負數，

用給 的值跟 -8  做相減， 等於0 最好， 但一班 都會大於0 ，這裡用 -3 來想好了，

-3 - (-8) = 5 ,  5 = 4 + 1 => 1101 = -8 + 5 = -3


由此看來，整個 2 補數的值很容易看， ( 最大負值 ) + 0 ~ n-2 的這些正數值總合 ＝ 十進位值

除了加減法，還有 and or 這二個可以用丫

我想到pseudo code中的 shiftedX = shiftedX * 2 這要怎麼寫了，

案，就 shiftedX = shiftedX + shiftedX , 酷，乘法寫出來了，

寫出一個乘法，只要 and 跟加法，就可以做出來了。


除法沒有sense, 參考以下網址：

https://en.wikipedia.org/wiki/Division_algorithm

對，call by value , call by reference ，有個想法，

會是前者的話 ， 要是，那個資料結構，能夠放在一個word的大小 ，

才能，不行 的話 ，參數傳遞，大多會是只傳base address, 傳base address的話，

那就 是call by reference.


好了，Math只剩下一個sqrt 要寫了，原來 sqrt 的從  (n/2) - 1 去找值，

主要的判斷式，是這個 ， 去 sqrt.jpeg ，這裡不好寫。

這裡的n 指的是cpu 的 bits  總數，這裡是 16個bits ,

最大正整收 32768 是 2 的15次方 減1  ，

2的15次方 約等 2的7次  ＊ 2的7 次方

以上面次方的角度來看，要抓出最大正整數的根號 ，要月2的7次方去迫近，

用2的8次方迫近的話，一定會爆了 overflow。

抓根號 ，是要用次方的角度來看， 不是用單除2 來看，因為單除2，

在次方的角度，也只是 減1 而已。


這裡 dealoc的概念，是用一個list去紀録，被free出來的空間，有那些。


這裡拿停車位，來講解fragment，蠻好的，當每台車停的間隔 參差不其，

這時侯，如果能把車子擺放整其，間隔一致，就能弄出多一個空間，來放別台車子。

每個free list的segment的結構是，有前二個word用來紀資料，第一個是紀録下一個segment的

address，第二個word紀録 這個segment，有幾個free的word。

heap 用static Array來存，很合理， memory是大家都能看到的，所 以很合理。


6.6 Graphics :

vector 跟 pixel Graphic 最大的差別在，當營木的解析度被放大，

能否完整的呈現。

這裡，他問了，如果只是單寫一個pixel ，為什麼不直接寫入就好了，還要整 個word拿出來，

再寫進去，不能直接改那個bit 嗎，  不行 ，因為cpu的運作，就 是以word為單位，


畫斜線，由左下往右上，pixel的填滿，是像只會往右往上走，線跟線之間 ，

壘在一起。

畫線很簡單，要想的就 是，下一步是要向右還是向上。


Output:

這裡講 ，每個字，在screen 上要怎麼表現出來， 每個字，會有個框框的大小，

框框  高 11 pixel , 寬 8 pixel ， 要表示一個字 ，用 11個值來表示，

怎麼說呢， 一個row 代表一個值，用個8 bits 的值，來表示，這個row ，那些bit 要反黑，


Keyboard:

keyboard 被按了某個鍵，值反應在 RAM[24576] 的這個行為， 是硬體 在做的，

在軟體 要做的事，便是把這些值抓出來，  看各個值，也就 是acii 碼 對到什麼

，像是字元，或是其它的換行 ...


list to the keyboard
keypress 是 real time operation . 現在值是什麼，就 輸出什麼
     list

gets a character
readChar  :  這比較 特 別， 這處 理的情況，像是，   某個 key 一直被按著，

             或者，使用者按了一個key 後 ，跑去做自已的事。

              while ( keypressd() == 0 )

              readChar 是用來反應，當有人按了keyboard，要做什麼處理。

              要使用者，完成一個 pressed  release，才算輸入。


String:

3 的ascii 是 51 。

setInt(): int to string
intValue(): string to int

突然有點了解，為什麼，資料的使用，前面要有型態的指定，

一般一個word裡面的值，都是當成數來看，先來看int ，long ，這些 識別字，都是

用來表示數的 ，  差別只在於，要讀入幾個word才能表示這些數。

再來看， string 跟int ， string跟int 最大的差別，再於，word讀 出來那是多少，

還要拿到ascii 表，去查，才能知道對應的字元是什麼。

int 轉 char 其實想想，蠻簡單的， 數字0 在 ascii 是48 ，以此類推，

return 回去的值，就 會是 48 ， 這會有問題 嗎？

不會， 應該接的型態會是char or string，所 以os 知道，48這個值，不是看成integer，

而是要放到 ascii table  去查，進而查出是 0.


Array:

陣列的實作，主要是在compiler ，那， 放在OS 這個章節，我能做些什麼呢？


compiler 讀到function這個keyword ，它不會建symbol 。

這裡要注意的一點就 是， 為什麼  沒有constructor ，而是有 Array.new

這個function .


Building the OS:

聴 到一句英文， from the ground up.

stub , reverser , perspective : 查一下解釋



要開始寫，String.jack, 順序呢，我想依照，12.pdf裡面提到的jack來順序來寫：


這裡，來想一下constructor中的this指， constructor function method，

這是三種不同的宣告，差別在傳入的參數中， 有沒有要傳入，指向物件base address的this  ,

通常會放在傳入的第一個參數，這感覺跟 python的 self 是很像的，

除了，function宣告，不會用到this指標，其它都會用到，

而Memory.alloc 這是在 constructor 內， 再轉成 vm code的時侯，

會被實作，藉由 field 關鍵字，去推算，總共要多少的Memory空間，

這部份，我之前講過， 一班內建的型態，只會佔一個word，那其它的物件，

也是給一個word，為什麼，  因為這個word存的是它的base address。

哎，這裡又有問題了， 傳入的this 是為了用它去給定下面的參數，

最後的 return this; 是要給誰， 不return 有差嗎？

我覺得 ，是可以不用這行 的，像java python也沒有， 這應該只是jack language ，

在設計上的東西而已。
  9    field int x, y; // screen location of the square's top-left corner
 10    field int size; // length of this square, in pixels
 11
 12    /** Constructs a new square with a given location and size. */
 13    constructor Square new(int Ax, int Ay, int Asize) {
 14       let x = Ax;
 15       let y = Ay;
 16       let size = Asize;
 17       do draw();
 18       return this;
 19    }


這裡又看出一個東西，那就 是，下面的宣告是用 constructor ，那代表，

一定有field 的關鍵字 ，是class 的資料， 如果沒有的話，

就 會用 function 去宣告， 這種情況 ，就 像是  Array 就 是了.
 19     constructor String new(int maxLength) {
 20         let length = maxLength;
 21         return this;
 22     }


這裡，就 如上所 說， method 關鍵字 會傳入this ，所 以body 裡面，

可以直接用 this
 24     /** Disposes this string. */
 25     method void dispose() {
 26         do Memory.deAlloc(this);
 27         return;
 28     }

這裡的body ，我寫 return length; ，但想想，如果改成 ，

return this.length; 是不是也可以，有問題 的，可能是，

compiler 有沒有實作而已

 30     /** Returns the current length of this string. */
 31     method int length() {
 32         return length;
 33     }


好，這裡對字元有新的理解，

var char c ;
let c = 'a';
let c = 56;

我覺得 上面寫的， 都是可以過的， assign 給它數值 ，或者，

利用單引號  直接給 指定的字元 ，

或者給 值  ，讓 compiler 幫 你去查表。


以下這段的 int2String，被視 為 是 method ,

理應是，因為  int2String 前面沒帶 class name ，

 79     method void setInt(int val) {
 80         let str = int2String(val);
 81         return;
 82     }
 83
 84     function string int2String(int val) {

Error message:
In String.jack (line 80): In subroutine setInt: Function String.int2String called as a method



今天在用vim ，做copy paste 的時侯，發現，用 shift + v 去copy 最後 面，

會有一個類似空白的字元也被反白， 但這個，實際上不是空白字元，它是換行 字元，

因為，你如果把剛 copy的東西，貼上去，會發現，會自已換行 ，就 是這個原因，

而一個檔案的最後一行 ，也會有類似的字元，但這個應該 是檔案結束這元，

而不是換行。




以下這行 ， 這樣寫可以， 就是用output的物件。
do output.appendChar( 45 );

但 這樣也可以， 先決條件是，這是method 的宣告，有傳入this  指標才可以.
do appendChar( 45 );



以下，在81行 ，會發 生 ，compiler error ,

首先， str 是物件沒錯 ，可以call它的function ，

但要注意一點是， int2String是 method，它自已會帶入一個this 指標，

=> this , val

然而前面 str.int2String(val); 這裡多個str 物件， 會多帶 一個參數進去。

除非現在是在外層，沒有this 指標在裡面。

 79     method void setInt(int val) {
 80         let length = 0;
 81         do str.int2String(val);
 82         return;
 83     }
 84
 85     method void int2String(int val) {


Memory.jack:

原來對Memory 的控制，就是用 Array而已 ，

    static Array memory;
    let memory = 0;

這樣就好了， 接下來，要想想的，就 是， 在vm file，裡面，

是用什麼，去 alloc memory.

突然想到，這八個基本的class ，是os 開始的時侯，會要去執 行 的 ，

那為什麼有的，有constructor ，有的沒有呢？

像 Memory 有constructor ,  是init () ;

而 Array 卻是 function , new () ；

這可以從開機流程來看， 最一開始執 行 的程式叫init() ，

這理應會燒在ROM裡面， 而這個程式，理應就 是寫，去執 行 所 有class內的init()，


Keyboard.jack

Output.jack

突然想到， 整個screen 是 256 x 512 pixel ,

256個 row 乘上  512 個 pixel,  每16 個 pixel , 用一個16 bit 的memory去記，

但，字的寬度是 8 bit 哎。


原來， 要判斷一個值，除以2 後 ，餘數 是1 還是0 ，直接對 , 最小的bit 做and ,

看之後的值，是不是1 ，就可以了.
let mask = cursor_x & 1;

這裡，我就 覺得 奇怪 ， 明明指標，就沒有定在 0,0 的位置 ，

怎麼，作者跑出來的，在左上角，會有 字元 A ，原來是 printChar，

這個function ， 原來在印了以後， 還要再 往前一個單位，

所以跑到最前頭 ，但這裡是要自已做判斷 ，超過24575 ，就 要回到16384。
 21         do Output.moveCursor(22, 63);
 22         do Output.printChar(68);
 23         do Output.printChar(65);

感覺 加減乘除 的一些比對， 可以把腦子都轉 成二進位去想, 會讓以後寫code，

變的很有效緑。

Memory.peek(location) +  map[index]
= > Memory.peek(location) |  map[index]

可以的麻。


Memory.jack :

雖然知道， memory是被當成一整 個的array來看，有點忘了，在vm 那層，

存取某個 memory address的值，指令有那些。

想到了，this 指標是用來指向 object 的base address，

而that 則是用來抓取某個address 的值。

 13     static Array memory;
 21     /** Returns the RAM value at the given address. */
 22     function int peek(int address) {
 23         return memory[address];
 24     }

  6 function Memory.peek 0
  7 push argument 0
  8 push static 0
  9 add
 10 pop pointer 1
 11 push that 0
 12 return

好了，拿以上二個，來做對比，

因為static 的相關變數只有一個，所以，它理應是被放到 static 0 的位置 ，

7 8 9行 是為了算出 memory[address] 的位置 ，

pointer 0 是this 指標

pointer 1 是that 指標

10 pop pointer 1 ; 這行 是為了把address 放到that 指標，

最重要的一行 來了，

push that 0 ; 首先，要知道，push 是把某個位置的值，放到 stack中，讓 後面去做運算，

              that 0； 是指， that 指標所 指的位置  ，加上offset 0 ，的位置

              這個值，放到stack 中。



開始實作前，有個問題 ，stack pointer 從  256 開始，

這裡不知道的是，heap base address 是從那裡開始。

應該 就 是在以下二組數之間。

2048 and 16384

heap base ： 2048
length: 14335

Problem:
submit時，發生error :
'That' segment must be in the Heap or Screen

solve:
Steven Green · 10 months ago
I worked it out! In Sys.Jack I was calling Math.init before Memory.init. But Math.init calls Memory.alloc, so I must call Memory.init first!

Yay - I can sleep now!


好了， 看完，它有寫的內容，但有個問題 ，每個 segment 都存指標，指向下一個，

但沒有存segment 的base address ， 他要怎麼回傳呢。

想想，如果我自已實作的話， 不會有link list , 就用Array，存，

哎， 想想不行 哎， 任何function 有new 空間，都會用到Memory alloc ,

這時侯，如果是在實作，就 不用這樣了。

如果真的是用，link list，那就會用到 peek poke了，

一個segment 的結構， offset 0 是紀下一個segment 的位置 ，

有一個變數，能用來記，當下這個segment 的 base address ， 用以去推算，

以下的各個address , 配memory都是從 ，最下面的開始拿。

等一下， 又有一個問題 ， 配的memory 空間， 要否含 next address , 及size ,

要。

要一個連續的空間，要用到 Memory.alloc  ， 又有一個問題 ，

一班的，變數宣告，不也會用到空間嗎？

不會沖到嗎？
 17     function Array new(int size) {
 18         return Memory.alloc(size);
 19     }

來看一下，首先， local 跟parameter ，會在進入一個function時，

給 定這些變數， 所以不care  , object 變數，比較 care.

  1 class Apple{
  2
  3    field int x, y; // screen location of the square's top-left corner
  4    field int size; // length of this square, in pixels
  5    field int memAddress;
  6    field int location;
  7
  8    /** Constructs a new square with a given location and size. */
  9    constructor Apple new(int Ax, int Ay, int Asize) {
 10       let x = Ax;
 11       let y = Ay;
 12       let size = Asize;
 13       let memAddress = 0;
 14       let location = 0;
 15       do draw();
 16       return this;
 17    }

下面來看看，物件的初始，在vm 那層是如何給的？

  1 function Apple.new 0
  2 push constant 5
  3 call Memory.alloc 1
  4 pop pointer 0
  5 push argument 0
  6 pop this 0
  7 push argument 1
  8 pop this 1
  9 push argument 2
 10 pop this 2
 11 push constant 0
 12 pop this 3
 13 push constant 0
 14 pop this 4
 15 push pointer 0
 16 call Apple.draw 1
 17 pop temp 0
 18 push pointer 0
 19 return

只先看2,3 行 push constant 5 是，因為這個物件要5個空間，

  3 call Memory.alloc 1 這行的話，大多不會變，因為只吃一個參數，

這裡的 Memory.alloc 應該 就 是目前，我們要實作的部份，

但在 Memory.jack中，也是有用到 object 的東西， 這裡有點，雞生蛋，

蛋生雞的感覺， Array.jack的實作 ，雖然很簡單，但也是要用到 Memory.jack

, 可想而知， Memory.jack 在Sys.jack中， 一定是第一個被call 的 init function .

喔， 所以在，Memory的實作中， 不能用到 field， 也不能用到 會配連續空間的Array,

所以，Memory的實作， 除了 local parameter 以外，只能用到 static ，

應該 差不多了， 來想一下，要怎麼實作，

memory[2048] 這用來當 nextnodeAddr = -1;

memory[2049]  這用來存 length , 而 2050 ~ 16384 就是一開始全部可以配的heap 空間，

一開始就是一塊，連續可以存取的空間。

先用想的，想一下情況，等下才會做的出來，

如果現在，要拿 5 的連續空間， 如何做到，拿走這5 的連續空間，

原先的那塊大的，還是能保持連續 ，從最後 面開始拿，

要size = 5 , 實際上，是會拿走 7 ，因為含 addr and size ，

還要再做一件事，就是，原先最大的那塊空間，其 size 要記得 減7 ，

此時，如果有圖可以看，free list ， 跟deAlloc list 分別有一個node。

再來一個情況想想，現在要把剛剛拿的size = 5 的空間還回去，

要怎麼還，目前deAlloc list 只有一個，所以 在找的方面，是不花時間的，

已經找到了，

讓 free list的頭，指向這個segment ， 再讓這個segment指向  原本free list指向的segment，

這樣加上去，就 是 O(1) ,

這樣就 可以理解 ，什麼叫fragment， 當OS 使用久了以後  ，

free list 就會變的很長，而且，每塊的空間，是無法評估， 當使用者，突然要求一塊大的空間，

那要怎麼辦 ， 每一塊free 的空間， 都掃過了，沒有一塊符合要求，

此時要做的事，就是所謂的 recycle ，讓free list 跟 deAlloc list做重新整理，

以便，能空出更大的空間，來讓使用者使用，

如何做到？

把用的空間，都放到 下面，  free 的空間集中到上面， 講起來簡單，

但實際 怎麼做，還不清楚  ，

這裡又想一個東西，如果，recycle 後，那個free空間，還是不足以達到使用者的要求，

那要怎麼辦 ， 把deAlloc list中的 segment , 先拿到 硬 碟空間去放，

這個行 為，就 是content switch.

為了要方便管理這二個不同的list，我打算 把 memory 2048 用來當做 free list 的頭 ，

2049 拿來當 deAlloc 的頭 。

如此設定， memory[2048] = 2051
           而memory[2052] = length = 16384 - 2052   ;
           memory[2051] = -1 ; 為什麼，因為它後面沒有free 的block了。


segment 中的size ，是含有 address 以及 length 這二個words ，

而使用alloc(n) 的n 是沒有的 ，所 以 ，去比對，那個block 是可以的，

還要多加2 ，因為這二個參數換到不同的list 可能也會用的到，

這裡感覺又會有個新問題 ，

這裡來假設 一個問題 ， 如果目前有個 block 的length 是 7 ，

而alloc(5)  , 也就 是5 + 2 是我要的實際空間，  遇到這個剛好大小的，

我就 整 個拿走， 再把上個指標的內容，改成指向，下一個segment，

再來想想喔， 如果現在給 的alloc(4) , 4 + 2 = 6 ， 這樣 7 的空間，能給它嗎？


如果給 了，剩下的空間1 ， 能做什麼， 要怎麼跟其它segment 串在一起，

剩二也不行 ，  至少要剩下3， 也就 是 addr , size , 1 ，總 共三個words，

那差距1 ，2 的情況，要怎麼辦, 我想呢， 一併也配給它好了。

剛看了一下， Memory 的 test Main.jack，只能用來測試 ，有沒有配到空間，

deAlloc 的話，無從 test .

我上面的差距1 2 , 我覺得 不用看那麼細,  這情況不好遇到,

作者，其實只要看，你能不能配給 他要的空間給 他用而已。


=================================================================================
Problem :

突然想到一個，之前 提姆哥問的問題 ， 就是 用指標跟 Array, 那一種 抓資 料比較 快？


solve:

=================================================================================


突然看懂一個東西：

static Array memory;
let memory = 0;

上面二行 ，這是什麼東西，就 是一個為Array 變數的 memory， 指向的memory空間為0，

因為沒有呼叫  Array.new() , 去回傳address 給memory，而memory這個變數， 其實，

把它看成一個int 的指標，它是用來指向，真正配到的記憶體 空間。

所 以，除了內建的資料型態，不是用指標去管理的以外，其它任何資料型態，都是。


喔，幹  可以這樣，
let base = 2048;
let memory[length] = max - base;
let memory[nextNode] = endOfList;

init() 裡的初始化，不是無意義 的， 而是 把base address 給 成 0 ，

之前在 [] 內給 offset 的值， 去直接存取memory中的值，

那Array memory ， 這個宣告，是為了把memory變數，當成一個base address 的指標，

而不是一班 的 整數，所以才宣告成Array ,  這樣也不會有問題 ，為什麼呢？

因為  Memory.jack內，並沒有call 到.


這裡，即便， 回傳的int 改成 Array也是可以，

回傳都是個word ，差別只是，會把那個word ，當成int ，還是當成指標去看而已。
 37     function int alloc(int size) {
 38         return 0;
 39     }


Problem:

*(-17) - ArrayTest test failure - Nowhere to return to in Sys.init.14
*(-17) - MathTest test failure - Comparison failure at line 2
*(-17) - MemoryTest test failure - Nowhere to return to in Sys.init.14

Solve:

Sys.init shouldn't return. You need to call sys.halt at the end of sys.init.

This point is missing in the lectures, and will be fixed.


Screen.jack:

原來， 要實作的，只有 線， 方型，圓型，這三個function而已，

方型跟線，可以分開實作， 因為線是有直線 跟斜線 ，而方型裡面，只有直線 ，

不用特別判斷斜線 ， 就 不要浪費 時間，去看那個。

Problem:

這段在compile 會有錯，

'That' segment must be in the Heap or Screen range in Screen.init 22

 24         let temp = 1;
 25         let count = 0;
 26         while ( count < 16 ) {
 27             let value[count] = temp;
 28             let temp = temp + temp;
 29             let count = count + 1;
 30         }

Solve:

意思大概就是， 選定的位置 ，超出範圍的意思，

來看一下， 16 bits = 0 ~ 15 ， 上面的初始化，問題是，這個int 是 整數，

不是正整數 ，最後一個index 15 的值，是負數，不是 正整數，

所以超出限制了，

使用 BitmapEditor.html  ，可以得 知，第15 bit 的值是  -32768
，
14 bit 是 16384.

所以，以上壘加的方式， 只能用到14 bit.

丫，這裡又看到一個問題了，
do Memory.poke(memAddress+0, -32768);

static Array value;
value[15] = -32768

這會有個問題，compile會有error  ,

說給 這個值太大了， 為什麼呢，

明明就 poke function 給 這個值就可以，int 也可以容的下，

為什麼compile 會有error ，這就 要來看宣告的Array了，

value 被宣告成一個Array，但這裡的Array 是一連串的word空間，

拿來幹 麻的呢， 當整 數嗎？

不是， 是拿來當位置 的， 所 以，它不能拿來放，超 過memory空間大小。


看到以的初始化，覺得 很酷，

之前學的，是把 var Array test ; 的test 當成指標來用。

    static int powers_of_two;

    /** Initializes the library. */
    function void init() {
        let powers_of_two = Array.new(16);
        let powers_of_two[0] = 1;
        let powers_of_two[1] = 2;
        let powers_of_two[2] = 4;
        let powers_of_two[3] = 8;
        let powers_of_two[4] = 16;
        let powers_of_two[5] = 32;
        let powers_of_two[6] = 64;
        let powers_of_two[7] = 128;
        let powers_of_two[8] = 256;
        let powers_of_two[9] = 512;
        let powers_of_two[10] = 1024;
        let powers_of_two[11] = 2048;
        let powers_of_two[12] = 4096;
        let powers_of_two[13] = 8192;
        let powers_of_two[14] = 16384;
        let powers_of_two[15] = 16384+16384;
        return;
    }

這裡之所 以這樣寫， 我想，

是因為  static int powers_of_two; 這行 ， 如果改成 static Array powers_of_two ,

會有問題 ， 指標會超過，RAM最大範圍，但這裡的

let powers_of_two[15] = 16384+16384;  不直接給值，而是用加的，有什麼用意嗎？

宣告的 static int powers_of_two ，好像是有用的，把 *(powers_of_two + 15 ) 的值，

看成 整 數。


奇怪了， 分成二個用減的， compile 可以過，一個就 不行 ， 是怎麼回事。
 67         //let test = -16384 - 16384;
 68         let test = -32768;


這種給 法，是把不經過Memory.alloc ，自已指定memory的位置，

一班很少這麼用， 那是因為，這裡知道位罝。
 60         var Array memory;
 61         let memory = 16384;


對於中框號 的存取，  test[i] , 以後 都要看成是base + index 的概念，

會比較 直接一點。


這行  很酷 ， 用and 來抓一個值的餘數。
let whichbit = x & 15;


畫斜線 的問題 ，似乎， 要考慮，左斜 ，右斜之類 的。


