// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static int row, column;
    static boolean black;
    static int value;
    static Array memory;

    /** Initializes the Screen. */
    function void init() {
        var int temp,count;
        let value = Array.new(16);
        let row = 0;
        let column = 0;
        let black = true;
        let temp = 1;
        let count = 0;
        let memory = 16384;

        while ( count < 16 ) {
            let value[count] = temp;
            let temp = temp + temp;
            let count = count + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int count;
        let count = 0;
        // 16384 ~ 24575
        while ( memory < 24576 ) {
            let memory[count] = 0;
            let count = count + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // a 23-by-64 characters grid, 23 rows of 64 char, row start from 0
        // 256 * 512 pixels
        // need to get which memory word, every 32 word in a row
        var int location, whichbit;
        let whichbit = x & 15;
        let location = (y * 32) + (x / 16);

        if ( black ) {
                let memory[location] = memory[location] | value[whichbit];
        }else {
                let memory[location] = memory[location] & ~(value[whichbit]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, positive, temp, headvalue, headindex, tailvalue, tailindex, small;
        var int left;
        let small = 0;
        let a = 0;
        let b = 0;
        let headvalue = 0;
        let tailvalue = 0;
        let diff = 0;
        let positive = 1;
        let temp = 0;

        if ( x2 < x1 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let headindex = (y1 * 32) + (x1 / 16);
        let tailindex = (y2 * 32) + (x2 / 16);
        let left = headindex + 1;

        let dx = (x2 - x1);
        let dy = (y2 - y1);
        if ( (dx * dy) < 0) {
            let positive = -1;
        }

        // Diagonal line
        if ( ~( (y2 - y1) = 0) & ~( (x2 - x1) = 0) ) {
          while ( ~(a = dx) & ~(b = dy) ) {
              do Screen.drawPixel( x1+a , y1+b );
              let diff = (b*dx) - (a*dy);
	            if ( positive*diff < 0 ) {
		              let b = b + positive;
	            }else {
		              let a = a + 1;
	            }
          }
        }

       // catch headvalue
       let temp = x1 & 15;
       while ( temp < 16) {
           let headvalue = headvalue + value[temp];
           let temp = temp + 1;
       }

       // catch tailvalue
       let temp = x2 & 15;
       while ( temp > -1) {
           let tailvalue = tailvalue + value[temp];
           let temp = temp - 1;
       }

       if ( headindex = tailindex ) {
           let temp = x1 & 15;
           while ( temp < ((x2 & 15)+1) ) {
               let small = small + value[temp];
               let temp = temp + 1;
           }
           if ( black ) {
	             let memory[ headindex ] = memory[ headindex ] | small;
           }else {
	             let memory[ headindex ] = ~small & memory[ headindex ];
           }
       }

       // horizontal improve
       if ( ( (y2 - y1) = 0) & ( (tailindex - headindex) > 0 )) {
           // head block
           if ( black ) {
	             let memory[ headindex ] = memory[ headindex ] | headvalue;
           }else {
	             let memory[ headindex ] = ~headvalue & memory[ headindex ];
           }

           //body
           while ( left < tailindex ) {
               if ( black ) {
                   let memory[ left ] = -1;
               }else {
                   let memory[ left ] = 0;
               }
               let left = left + 1;
           }

           // tail block
           if ( black ) {
	             let memory[ tailindex ] =  tailvalue | memory[ tailindex ] ;
           }else {
	             let memory[ tailindex ] = ~tailvalue | memory[ tailindex ] ;
           }
       }

        // vertical
        if ( (x2 - x1) = 0 ) {
          while ( b < dy ) {
              do Screen.drawPixel( x1 , y1+b );
              let b = b + 1;
          }
          while ( b > dy ) {
              do Screen.drawPixel( x1 , y1+b );
              let b = b - 1;
          }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, b, bottom;
        let b = y1;
        let bottom = y2 + 1;
        while ( b < bottom ) {
            do Screen.drawLine( x1, b , x2, b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, diff, doubleR, horizon;
        let dy = -r;
        let diff = 0;
        let doubleR = r*r;
        let horizon = 0;

        while ( dy < r) {
            let diff = Math.sqrt( doubleR - (dy*dy) );
            let horizon = y + dy;
            do Screen.drawLine( x-diff , horizon, x+diff , horizon);
            let dy = dy + 1;
        }
        return;
    }
}
